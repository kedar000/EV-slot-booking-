generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgres://ev_reservation_user:ev_reservation_password@localhost:4003/ev_reservation_db"
}

model Reservation {
  id            String      @id @default(uuid())
  userId        String
  slotId        String      // References Slot in Station Service
  stationId     String      // References Station in Station Service
  date          DateTime    // Date of the reservation
  hour          Int         // Hour of the reservation (0-23)
  totalPrice    Float
  status        ReservationStatus @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  User User[]
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  phone     String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Reservations Reservation[]
}

// to maintain synchronization between the Station Service and the Reservation Service, they can communicate via a message broker like Kafka. For example:

// 1.	Reservation Creation: When a reservation is created, the Reservation Service can publish a message to mark the specific slot as unavailable in the Station Service.
// 2.	Reservation Status Update: If a reservation is cancelled or completed, the Reservation Service can publish a message to update the slot availability back to true.